
uart_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000254  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000099c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c20  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001898  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define LED_PORT PORTB
#define LED_PIN PB5
#define LED_TOGGLE() (LED_PORT ^= 1<<LED_PIN)

int main()
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	initUART();
  88:	0e 94 79 00 	call	0xf2	; 0xf2 <initUART>
	RX_INTDIS();//enable RX interrupt
  8c:	81 ec       	ldi	r24, 0xC1	; 193
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	21 ec       	ldi	r18, 0xC1	; 193
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	f9 01       	movw	r30, r18
  96:	20 81       	ld	r18, Z
  98:	2f 77       	andi	r18, 0x7F	; 127
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
	sei();
  9e:	78 94       	sei
	while(1)
	{
		//main loop
	}
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x20>

000000a2 <USART_RXC_vect>:
}
ISR(USART_RXC_vect)
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	3f 93       	push	r19
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
	LED_TOGGLE();
  c2:	85 e2       	ldi	r24, 0x25	; 37
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	25 e2       	ldi	r18, 0x25	; 37
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	30 81       	ld	r19, Z
  ce:	20 e2       	ldi	r18, 0x20	; 32
  d0:	23 27       	eor	r18, r19
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	3f 91       	pop	r19
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <initUART>:
#define _DEBUG			0


/*! \brief Configures baud rate (refer datasheet) */
void initUART(void)
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
	// Not necessary; initialize anyway
	DDRD |= _BV(PD1);
  fa:	8a e2       	ldi	r24, 0x2A	; 42
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	2a e2       	ldi	r18, 0x2A	; 42
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	20 81       	ld	r18, Z
 106:	22 60       	ori	r18, 0x02	; 2
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	DDRD &= ~_BV(PD0);
 10c:	8a e2       	ldi	r24, 0x2A	; 42
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	2a e2       	ldi	r18, 0x2A	; 42
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	f9 01       	movw	r30, r18
 116:	20 81       	ld	r18, Z
 118:	2e 7f       	andi	r18, 0xFE	; 254
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18

	// Set baud rate; lower byte and top nibble
	UBRR0H = ((_UBRR) & 0xF00);
 11e:	85 ec       	ldi	r24, 0xC5	; 197
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	fc 01       	movw	r30, r24
 124:	10 82       	st	Z, r1
	UBRR0L = (uint8_t) ((_UBRR) & 0xFF);
 126:	84 ec       	ldi	r24, 0xC4	; 196
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	27 e6       	ldi	r18, 0x67	; 103
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18

	TX_START();
 130:	81 ec       	ldi	r24, 0xC1	; 193
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	21 ec       	ldi	r18, 0xC1	; 193
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	28 60       	ori	r18, 0x08	; 8
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
	RX_START();
 142:	81 ec       	ldi	r24, 0xC1	; 193
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	21 ec       	ldi	r18, 0xC1	; 193
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f9 01       	movw	r30, r18
 14c:	20 81       	ld	r18, Z
 14e:	20 61       	ori	r18, 0x10	; 16
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18

	// Set frame format = 8-N-1
	UCSR0C = (_DATA << UCSZ00);
 154:	82 ec       	ldi	r24, 0xC2	; 194
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	26 e0       	ldi	r18, 0x06	; 6
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18

}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <getByte>:
/*! \brief Returns a byte from the serial buffer
 * 	Use this function if the RX interrupt is not enabled.
 * 	Returns 0 on empty buffer
 */
uint8_t getByte(void)
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
	// Check to see if something was received
	while (!(UCSR0A & _BV(RXC0)));
 16c:	00 00       	nop
 16e:	80 ec       	ldi	r24, 0xC0	; 192
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	80 81       	ld	r24, Z
 176:	88 23       	and	r24, r24
 178:	d4 f7       	brge	.-12     	; 0x16e <getByte+0xa>
	return (uint8_t) UDR0;
 17a:	86 ec       	ldi	r24, 0xC6	; 198
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	fc 01       	movw	r30, r24
 180:	80 81       	ld	r24, Z
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <putByte>:
/*! \brief Transmits a byte
 * 	Use this function if the TX interrupt is not enabled.
 * 	Blocks the serial port while TX completes
 */
void putByte(unsigned char data)
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	1f 92       	push	r1
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	89 83       	std	Y+1, r24	; 0x01
	// Stay here until data buffer is empty
	while (!(UCSR0A & _BV(UDRE0)));
 194:	00 00       	nop
 196:	80 ec       	ldi	r24, 0xC0	; 192
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	fc 01       	movw	r30, r24
 19c:	80 81       	ld	r24, Z
 19e:	88 2f       	mov	r24, r24
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	80 72       	andi	r24, 0x20	; 32
 1a4:	99 27       	eor	r25, r25
 1a6:	89 2b       	or	r24, r25
 1a8:	b1 f3       	breq	.-20     	; 0x196 <putByte+0xe>
	UDR0 = (unsigned char) data;
 1aa:	86 ec       	ldi	r24, 0xC6	; 198
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	29 81       	ldd	r18, Y+1	; 0x01
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18

}
 1b4:	0f 90       	pop	r0
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <writeString>:

/*! \brief Writes an ASCII string to the TX buffer */
void writeString(char *str)
{
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <writeString+0x6>
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
 1c6:	9a 83       	std	Y+2, r25	; 0x02
 1c8:	89 83       	std	Y+1, r24	; 0x01
	while (*str != '\0')
 1ca:	0b c0       	rjmp	.+22     	; 0x1e2 <writeString+0x26>
	{
		putByte(*str);
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	9a 81       	ldd	r25, Y+2	; 0x02
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	0e 94 c4 00 	call	0x188	; 0x188 <putByte>
		++str;
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	9a 81       	ldd	r25, Y+2	; 0x02
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	9a 83       	std	Y+2, r25	; 0x02
 1e0:	89 83       	std	Y+1, r24	; 0x01
}

/*! \brief Writes an ASCII string to the TX buffer */
void writeString(char *str)
{
	while (*str != '\0')
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	9a 81       	ldd	r25, Y+2	; 0x02
 1e6:	fc 01       	movw	r30, r24
 1e8:	80 81       	ld	r24, Z
 1ea:	88 23       	and	r24, r24
 1ec:	79 f7       	brne	.-34     	; 0x1cc <writeString+0x10>
	{
		putByte(*str);
		++str;
	}
}
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <readString>:

const char* readString(void)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	2c 97       	sbiw	r28, 0x0c	; 12
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
	char rxstr[RX_BUFF];
	char* temp;
	temp = rxstr;
 20c:	ce 01       	movw	r24, r28
 20e:	03 96       	adiw	r24, 0x03	; 3
 210:	9a 83       	std	Y+2, r25	; 0x02
 212:	89 83       	std	Y+1, r24	; 0x01

	while((*temp = getByte()) != '\n')
 214:	05 c0       	rjmp	.+10     	; 0x220 <readString+0x28>
	{
		++temp;
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	9a 81       	ldd	r25, Y+2	; 0x02
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	9a 83       	std	Y+2, r25	; 0x02
 21e:	89 83       	std	Y+1, r24	; 0x01
{
	char rxstr[RX_BUFF];
	char* temp;
	temp = rxstr;

	while((*temp = getByte()) != '\n')
 220:	0e 94 b2 00 	call	0x164	; 0x164 <getByte>
 224:	28 2f       	mov	r18, r24
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	9a 81       	ldd	r25, Y+2	; 0x02
 22a:	fc 01       	movw	r30, r24
 22c:	20 83       	st	Z, r18
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	9a 81       	ldd	r25, Y+2	; 0x02
 232:	fc 01       	movw	r30, r24
 234:	80 81       	ld	r24, Z
 236:	8a 30       	cpi	r24, 0x0A	; 10
 238:	71 f7       	brne	.-36     	; 0x216 <readString+0x1e>
	{
		++temp;
	}

	return rxstr;
 23a:	ce 01       	movw	r24, r28
 23c:	03 96       	adiw	r24, 0x03	; 3
}
 23e:	2c 96       	adiw	r28, 0x0c	; 12
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	f8 94       	cli
 244:	de bf       	out	0x3e, r29	; 62
 246:	0f be       	out	0x3f, r0	; 63
 248:	cd bf       	out	0x3d, r28	; 61
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
